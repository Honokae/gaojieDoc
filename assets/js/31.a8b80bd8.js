(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{594:function(e,v,_){"use strict";_.r(v);var a=_(14),l=Object(a.a)({},(function(){var e=this,v=e.$createElement,_=e._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[_("h1",{attrs:{id:"webpack相关问题"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#webpack相关问题"}},[e._v("#")]),e._v(" webpack相关问题")]),e._v(" "),_("ul",[_("li",[e._v("webpack是基于"),_("code",[e._v("入口")]),e._v("的。webpack会自动地"),_("code",[e._v("递归")]),e._v("解析入口所需要加载的所有资源文件，然后用不同的Loader来处理不同的文件，用Plugin来扩展webpack功能")])]),e._v(" "),_("h2",{attrs:{id:"问题1-loader和plugin的区别"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#问题1-loader和plugin的区别"}},[e._v("#")]),e._v(" 问题1：Loader和Plugin的区别")]),e._v(" "),_("ul",[_("li",[e._v("Loader:文件处理，转码,格式转换，"),_("code",[e._v("文件转换")]),e._v(",加载器,"),_("code",[e._v("加载和解析")]),e._v("-eg:ccss转css，es6转es5")]),e._v(" "),_("li",[e._v("Plugin:扩展插件，"),_("code",[e._v("扩展器")]),e._v("，压缩文件--eg:uglifyjs-webpack-plugin,通过UglifyES压缩ES6代码")])]),e._v(" "),_("h2",{attrs:{id:"问题2-常见的loader及其作用"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#问题2-常见的loader及其作用"}},[e._v("#")]),e._v(" 问题2：常见的Loader及其作用")]),e._v(" "),_("ul",[_("li",[e._v("babel-loader：把 ES6 转换成 ES5")]),e._v(" "),_("li",[e._v("css-loader：加载 CSS，支持模块化、压缩、文件导入等特性")]),e._v(" "),_("li",[e._v("optimize-css-assets-webpack-plugin:压缩css")]),e._v(" "),_("li",[e._v("style-loader：把 CSS 代码注入到 JavaScript 中，通过 DOM 操作去加载 CSS。")]),e._v(" "),_("li",[e._v("eslint-loader：通过 ESLint 检查 JavaScript 代码")]),e._v(" "),_("li",[_("code",[e._v("html-webpack-plugin")]),e._v(":生成的html页面")]),e._v(" "),_("li",[e._v("uglifyjs-webpack-plugin:压缩js,开启文件缓存和使用多进程")]),e._v(" "),_("li",[e._v("compression-webpack-plugin:gzip压缩")])]),e._v(" "),_("h2",{attrs:{id:"问题3-常用plugin及其作用"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#问题3-常用plugin及其作用"}},[e._v("#")]),e._v(" 问题3：常用Plugin及其作用")]),e._v(" "),_("ul",[_("li",[e._v("commons-chunk-plugin：提取公共代码")]),e._v(" "),_("li",[e._v("uglifyjs-webpack-plugin:通过UglifyES压缩ES6代码")])]),e._v(" "),_("h2",{attrs:{id:"问题4-webpack的构建流程"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#问题4-webpack的构建流程"}},[e._v("#")]),e._v(" 问题4：webpack的构建流程")]),e._v(" "),_("ul",[_("li",[_("code",[e._v("初始化")]),e._v("参数：从配置文件和 Shell 语句中读取与合并参数，得出最终的参数")]),e._v(" "),_("li",[e._v("开始"),_("code",[e._v("编译")]),e._v("：用上一步得到的参数初始化 Compiler 对象，加载所有配置的插件，执行对象的 "),_("code",[e._v("run")]),e._v(" 方法开始执行编译")]),e._v(" "),_("li",[e._v("确定"),_("code",[e._v("入口")]),e._v("：根据配置中的 "),_("code",[e._v("entry")]),e._v(" 找出所有的入口文件")]),e._v(" "),_("li",[_("code",[e._v("编译")]),e._v("模块：从入口文件出发，调用所有配置的 Loader 对模块进行翻译，再找出该模块依赖的模块，再"),_("code",[e._v("递归")]),e._v("本步骤直到所有入口依赖的文件都经过了本步骤的处理")]),e._v(" "),_("li",[e._v("完成模块编译：在经过第4步使用 Loader 翻译完所有模块后，得到了每个模块被翻译后的最终内容以及它们之间的依赖关系")]),e._v(" "),_("li",[_("code",[e._v("输出")]),e._v("资源：根据入口和模块之间的依赖关系，组装成一个个包含多个模块的 "),_("code",[e._v("Chunk")]),e._v("，再把每个 Chunk 转换成一个单独的文件加入到输出列表，这步是可以修改输出内容的最后机会")]),e._v(" "),_("li",[e._v("输出完成：在确定好输出内容后，根据配置确定输出的路径和文件名，把文件内容"),_("code",[e._v("写入")]),e._v("到文件系统")])])])}),[],!1,null,null,null);v.default=l.exports}}]);